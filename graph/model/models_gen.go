// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddRole struct {
	Name        string    `json:"name"`
	Permissions []*string `json:"permissions"`
	Parents     []*string `json:"parents"`
}

type DeletePermission struct {
	Name       string `json:"name"`
	Permission string `json:"permission"`
}

type DeleteRole struct {
	Name string `json:"name"`
}

type Jwt struct {
	User       string      `json:"user"`
	Roles      []string    `json:"roles"`
	Properties []*Property `json:"properties"`
}

type JwtMutation struct {
	Create string `json:"create"`
}

type JwtQuery struct {
	Token *Jwt `json:"token"`
}

type NewJwt struct {
	User  string   `json:"user"`
	Roles []string `json:"roles"`
}

type PermissionMutation struct {
	Delete bool `json:"delete"`
}

type Property struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

type RbacMutation struct {
	Role       *RoleMutation       `json:"role"`
	Permission *PermissionMutation `json:"permission"`
	Save       bool                `json:"save"`
}

type RbacQuery struct {
	Permission []*string `json:"permission"`
	Role       []*Role   `json:"role"`
}

type Role struct {
	Name        string    `json:"name"`
	Permissions []*string `json:"permissions"`
	Parents     []*string `json:"parents"`
}

type RoleMutation struct {
	Upsert *Role `json:"upsert"`
	Delete bool  `json:"delete"`
}

type Rbac string

const (
	RbacJwtQuery   Rbac = "JWT_QUERY"
	RbacJwtMutate  Rbac = "JWT_MUTATE"
	RbacRbacQuery  Rbac = "RBAC_QUERY"
	RbacRbacMutate Rbac = "RBAC_MUTATE"
)

var AllRbac = []Rbac{
	RbacJwtQuery,
	RbacJwtMutate,
	RbacRbacQuery,
	RbacRbacMutate,
}

func (e Rbac) IsValid() bool {
	switch e {
	case RbacJwtQuery, RbacJwtMutate, RbacRbacQuery, RbacRbacMutate:
		return true
	}
	return false
}

func (e Rbac) String() string {
	return string(e)
}

func (e *Rbac) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Rbac(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RBAC", str)
	}
	return nil
}

func (e Rbac) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
