directive @HasRbac(rbac: RBAC!) on FIELD_DEFINITION

enum RBAC {
    JWT_QUERY
    JWT_MUTATE
    RBAC_QUERY
    RBAC_MUTATE
}

# JWT 

type Property {
  name: String!
  value: String!
}

type Jwt {
  user: String!
  roles: [String!]!
  properties: [Property!]!
}

input NewJwt {
  user: String!
  roles: [String!]!
}


# RBAC

type Role {
  name: String!
  permissions: [String]
  parents: [String]
}

input AddRole {
  name: String!
  permissions: [String]
  parents: [String]
}

input DeleteRole {
  name: String!
}

input DeletePermission {
  name: String!
  permission: String!
}

type JwtMutation {
   create(input: NewJwt!): String!
}

type RoleMutation {
  upsert(input: AddRole!): Role!
  delete(input: DeleteRole!): Boolean!
}

type PermissionMutation {
  delete(input: DeletePermission!): Boolean! 
}

type RbacMutation {
  role: RoleMutation!
  permission: PermissionMutation!
  save: Boolean! 
}

type Mutation {
  # JWT mutations
  jwt: JwtMutation!

  # RBAC mutations
  rbac: RbacMutation! @HasRbac(rbac: RBAC_MUTATE)
}

type JwtQuery {
    token(token: String!): Jwt!
}

type RbacQuery {
  permission(name: String): [String]!
  role(name: String): [Role]! 
}

type Query {
  # JWT queries
  jwt: JwtQuery!  @HasRbac(rbac: JWT_QUERY)

  # RBAC queries
  rbac: RbacQuery! @HasRbac(rbac: RBAC_QUERY)
}
